
INTRO:

Hi All,



Here is some c that makes a neural network and randomly mutates its weights and toplogy in the 
hope of learning a good model of inputs to outputs. 



Getting started:


enter the following commands in bash, from the project directory

make
chmod +x ./test
cd ./microworld1
make
chmod +x ./microworld1

You're good to go!



Basic Overview:


the neural network is stored in a struct array

currently starting neuron count is define via mutationParams

any  number of inputs and outputs can be specified when advancing the neural network as the sum of inputs and outputs is at most one less than the 
number of neurons, the inputs are applied starting at index 1 and the outputs are measured starting at index inputCount + 1 

any neuron can point any other neuron, so the network is not feed forward and is capable of holding state.  

If you would like to collect the topology of the network you have just trained, terminate the program when you arrive after a prompt when the training sequence completes. 
The log.txt file will hold the topology. Rename or move this file to prevent it from being overwritten in future runs. The brain.c class implements a method for loading a brain configuration from file, so you can load saved models for further training or analysis. 


Mutation:

There is no mutation oversight algorithm of simulated annealing, it's just based on
fixed parameters. This will need work

Mutation Types:
weight change mutation, connection target change mutation, neuron addition/removal mutation, and connection addition/removal mutation.


Known Issues:

nothing worth noting right now.


Questions/concerns:

please ask in signal chat



Cheers,



John


MAKING A MICROWORLD:


Making a microworld/evaluation task  to test the learning system is fairly easy, and only requires knowledge of several functions implemented by brain.c and learning.c.
A simple microworld template is as follows:






float evaluateMicroWorldPerformance(brain * b)
{


// need to return a value in the range 0-100(inclusive) based on performance


}



int main(int argc, char * argv[])
{
	srand(time(0));


	params * p = initializeDefaultParams();
	p->mParams->initialNeuronCount = 20;


	if(argc == 2 && strstr(argv[1], "train"))
	{
		brain * resultBrain = learn(evaluateMicroWorldPerformance, p);
	}
	else if(argc == 3 && strstr(argv[1],"analyze"))
	{
		srand(time(0));
		FILE * fp = fopen(argv[2], "r");
		brain * b = loadBrainFromFile(fp);
		m2Analysis(b);
	}
	else if (argc == 3 && strstr(argv[1], "improve"))
	{
		FILE * brainFile = fopen(argv[2], "r");
		brain * starter = loadBrainFromFile(brainFile);
		brain * resultBrain = learnFromExistingBrain(starter, evaluateMicroWorldPerformance, p); 
	}
	else
	{
		printf("INVALID USAGE\n");
	}

	return 1;	
}
































































